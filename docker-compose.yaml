version: "3.9"

services:
  db:
    image: postgres:15.3-alpine
    container_name: github-db
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 15s
      timeout: 10s
      retries: 10
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA:-github}
    volumes:
      - ${PATH_POSTGRES_DATA:-./volumes/.postgres/data/}:/var/lib/postgresql/data
      - ./scripts/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    networks:
      - app
  pgadmin:
    container_name: pg-admin
    image: dpage/pgadmin4:7.3
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - ${PATH_PGADMIN_DATA:-./volumes/.pgadmin/data}:/var/lib/pgadmin
    ports:
      - ${PGADMIN_PORT:-5050}:80
    networks:
      - app
  server:
    build:
      context: .
      dockerfile: ./src/Dockerfile.prefect
    container_name: prefect-server
    restart: always
    healthcheck:
      test: "curl -f localhost:${PREFECT_SERVER_API_PORT:-4200}/api/health"
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 10s
    entrypoint: [ "prefect", "server", "start" ]
    environment:
      # - PREFECT_ORION_API_HOST=0.0.0.0
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_SERVER_API_PORT=${PREFECT_SERVER_API_PORT:-4200}
      - PREFECT_ORION_DATABASE_CONNECTION_URL=${PREFECT_DB_CONNECTION_URL}
    ports:
      - ${PREFECT_SERVER_API_PORT:-4200}:${PREFECT_SERVER_API_PORT:-4200}
    volumes:
      - ${PATH_PREFECT_DATA:-./volumes/.prefect/data}:/root/.prefect
    networks:
      - app
      - prefect
    depends_on:
      db:
        condition: service_healthy
  etl:
    build:
      context: .
      dockerfile: ./src/etl/Dockerfile
    container_name: etl-pipeline
    restart: always
    environment:
      - API_TOKEN=${API_TOKEN}
      - PREFECT_RESULTS_PERSIST_BY_DEFAULT=true
      - PREFECT_API_URL=http://server:${PREFECT_SERVER_API_PORT:-4200}/api
      - PREFECT_WORK_POOL=${PREFECT_WORK_POOL:-github-agent-pool}
      - PREFECT_WORK_QUEUE=${PREFECT_WORK_QUEUE:-default}
      - PREFECT_LOGGING_EXTRA_LOGGERS=my_logger
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA:-github}
      - PYTHONPATH=/app
    volumes:
      - ${PATH_RAW_DATA:-./volumes/data/}:${DOCKER_PATH_RAW_DATA:-/volumes/data}
    command: "bash /app/src/etl/run.sh"
    networks:
      - app
      - prefect
    depends_on:
      server:
        condition: service_healthy
  dashboard:
    build:
      context: .
      dockerfile: ./src/dashboard/Dockerfile
    container_name: github-dashboard
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA:-github}
      - API_TOKEN=${API_TOKEN}
    ports:
      - ${STREAMLIT_PORT:-8501}:8501
    networks:
      - app
    depends_on:
      db:
        condition: service_healthy

networks:
  app:
    driver: bridge
  prefect:
    driver: bridge
